import sys
sys.path.append("../")

import fire
from scripts.optimize import Optimize
from lolbo.molecule_objective import MoleculeObjective
from lolbo.utils.mol_utils.load_data import load_molecule_train_data


class MoleculeOptimization(Optimize):
    """
    Run LOLBO Optimization for any Molecular Optimization Task using the SELFIES VAE 
    (Must be either a GuacaMol Task or the Penalized LogP task)

    Args:
        path_to_vae_statedict: Path to state dict of pretrained SELFIES VAE,
        path_to_vae_train_data: Path to VAE training data used to initialize VAE vocab,
        path_to_data_folder: Path to initial data (smiles and correspond scores for each task), used to initialize optimization run,
        max_string_length: Limit on string length that can be generated by VAE (without a limit we can run into OOM issues)
    """
    def __init__(
        self,
        path_to_vae_statedict: str="../lolbo/utils/mol_utils/selfies_vae/state_dict/SELFIES-VAE-state-dict.pt",
        path_to_vae_train_data: str="../selfies_vae_data/original_vae_train_selfies.csv",
        path_to_data_folder: str="../selfies_vae_data/decoded_guacamol_scores/",
        max_string_length: int=1024,
        **kwargs
    ):
        self.path_to_vae_statedict = path_to_vae_statedict
        self.path_to_vae_train_data = path_to_vae_train_data
        self.path_to_data_folder = path_to_data_folder
        self.max_string_length = max_string_length

        super().__init__(**kwargs)

        # add args to method args dict to be logged by wandb
        self.method_args['molopt'] = locals()
        del self.method_args['molopt']['self']


    def initialize_objective(self):
        # initialize molecule objective
        self.objective = MoleculeObjective(
            task_id=self.task_id,
            path_to_vae_statedict=self.path_to_vae_statedict,
            path_to_train_data=self.path_to_vae_train_data,
            max_string_length=self.max_string_length,
        )

        return self


    def load_train_data(self):
        ''' Load in or randomly initialize self.num_initialization_points
            total initial data points to kick-off optimization 
            Must define the following:
                self.init_train_x (a list of x's)
                self.init_train_y (a tensor of scores/y's)
                self.init_train_y (a tensor of corresponding latent space points)
            '''
        self.init_train_x, self.init_train_z, self.init_train_y = load_molecule_train_data(
            task_id=self.task_id,
            data_folder=self.path_to_data_folder,
            num_initialization_points=self.num_initialization_points,
        )
        if self.verbose:
            print("Loaded initial training data")
            print("train z shape:", self.init_train_z.shape)
            print("train y shape:", self.init_train_y.shape)
            print(f"train x list length: {len(self.init_train_x)}\n")

        return self 


if __name__ == "__main__":
    fire.Fire(MoleculeOptimization)
